syntax = "proto3";

package bigbrain;

enum IOType {
    IO_OTHER = 0;
    IO_IMAGE = 1;
    IO_TEXT = 2;
    IO_AUDIO = 3;
    IO_GRAPH = 4;
    IO_VECTOR = 5;
    IO_MATRIX = 6;
    IO_BBOX = 7;
}

// How the model was created
enum ModelFramework {
    FRAMEWORK_TENSORFLOW = 0;
    FRAMEWORK_PYTORCH = 1;
    FRAMEWORK_OTHER =2;
}

message AIModelFramework {
    ModelFramework framework = 1;
    string version = 2;
}

message AICapability {
    AIModelInformation information = 1;
    AIModelContainer container = 2;
}

// holds information about the model
message AIModelInformation {
    // name of the model, not uid
    string name = 1;
    // description of the model
    string description = 2;
    // path (unique)
    string path = 3;
    // how the model was created
    AIModelFramework framework = 4;
    // inputs for inference
    repeated IOType inputs = 5;
    // outputs for inference
    repeated IOType outputs = 6;
    // set to true if mode updateable
    bool updateable = 7;
    // inputs for update
    repeated IOType update_inputs = 8;
    // outputs for update
    repeated IOType update_outputs = 9;
}

// holds the model weights and state
message AIModelContainer {
    // hash of the total structure
    string hash = 1;
    // hash of the model
    string hash_model = 2;
    // hash of the state
    string hash_state = 3;
    // timestamp of creation
    string timestamp = 4;
    // model data 
    bytes model = 5;
    // state data (if no state keep empty)
    bytes state = 6;
    // for the future
    bytes other = 7;
}

service AIService {
    rpc ReportCapabilities (AICapabilityRequest) returns (AICapabilityResponse) {}
}

message AICapabilityRequest{

};

message AICapabilityResponse{
    repeated AIModelInformation models_information = 1;
};

