// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bigbrain.proto

#ifndef PROTOBUF_INCLUDED_bigbrain_2eproto
#define PROTOBUF_INCLUDED_bigbrain_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bigbrain_2eproto 

namespace protobuf_bigbrain_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bigbrain_2eproto
namespace bigbrain {
class AICapability;
class AICapabilityDefaultTypeInternal;
extern AICapabilityDefaultTypeInternal _AICapability_default_instance_;
class AICapabilityRequest;
class AICapabilityRequestDefaultTypeInternal;
extern AICapabilityRequestDefaultTypeInternal _AICapabilityRequest_default_instance_;
class AICapabilityResponse;
class AICapabilityResponseDefaultTypeInternal;
extern AICapabilityResponseDefaultTypeInternal _AICapabilityResponse_default_instance_;
class AIModelContainer;
class AIModelContainerDefaultTypeInternal;
extern AIModelContainerDefaultTypeInternal _AIModelContainer_default_instance_;
class AIModelInformation;
class AIModelInformationDefaultTypeInternal;
extern AIModelInformationDefaultTypeInternal _AIModelInformation_default_instance_;
}  // namespace bigbrain
namespace google {
namespace protobuf {
template<> ::bigbrain::AICapability* Arena::CreateMaybeMessage<::bigbrain::AICapability>(Arena*);
template<> ::bigbrain::AICapabilityRequest* Arena::CreateMaybeMessage<::bigbrain::AICapabilityRequest>(Arena*);
template<> ::bigbrain::AICapabilityResponse* Arena::CreateMaybeMessage<::bigbrain::AICapabilityResponse>(Arena*);
template<> ::bigbrain::AIModelContainer* Arena::CreateMaybeMessage<::bigbrain::AIModelContainer>(Arena*);
template<> ::bigbrain::AIModelInformation* Arena::CreateMaybeMessage<::bigbrain::AIModelInformation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bigbrain {

enum IOType {
  OTHER = 0,
  IMAGE = 1,
  TEXT = 2,
  AUDIO = 3,
  GRAPH = 4,
  VECTOR = 5,
  MATRIX = 6,
  BBOX = 7,
  IOType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IOType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IOType_IsValid(int value);
const IOType IOType_MIN = OTHER;
const IOType IOType_MAX = BBOX;
const int IOType_ARRAYSIZE = IOType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IOType_descriptor();
inline const ::std::string& IOType_Name(IOType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IOType_descriptor(), value);
}
inline bool IOType_Parse(
    const ::std::string& name, IOType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IOType>(
    IOType_descriptor(), name, value);
}
// ===================================================================

class AICapability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigbrain.AICapability) */ {
 public:
  AICapability();
  virtual ~AICapability();

  AICapability(const AICapability& from);

  inline AICapability& operator=(const AICapability& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AICapability(AICapability&& from) noexcept
    : AICapability() {
    *this = ::std::move(from);
  }

  inline AICapability& operator=(AICapability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AICapability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AICapability* internal_default_instance() {
    return reinterpret_cast<const AICapability*>(
               &_AICapability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AICapability* other);
  friend void swap(AICapability& a, AICapability& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AICapability* New() const final {
    return CreateMaybeMessage<AICapability>(NULL);
  }

  AICapability* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AICapability>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AICapability& from);
  void MergeFrom(const AICapability& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AICapability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bigbrain.AIModelInformation information = 1;
  bool has_information() const;
  void clear_information();
  static const int kInformationFieldNumber = 1;
  private:
  const ::bigbrain::AIModelInformation& _internal_information() const;
  public:
  const ::bigbrain::AIModelInformation& information() const;
  ::bigbrain::AIModelInformation* release_information();
  ::bigbrain::AIModelInformation* mutable_information();
  void set_allocated_information(::bigbrain::AIModelInformation* information);

  // .bigbrain.AIModelContainer container = 2;
  bool has_container() const;
  void clear_container();
  static const int kContainerFieldNumber = 2;
  private:
  const ::bigbrain::AIModelContainer& _internal_container() const;
  public:
  const ::bigbrain::AIModelContainer& container() const;
  ::bigbrain::AIModelContainer* release_container();
  ::bigbrain::AIModelContainer* mutable_container();
  void set_allocated_container(::bigbrain::AIModelContainer* container);

  // @@protoc_insertion_point(class_scope:bigbrain.AICapability)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bigbrain::AIModelInformation* information_;
  ::bigbrain::AIModelContainer* container_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bigbrain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AIModelInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigbrain.AIModelInformation) */ {
 public:
  AIModelInformation();
  virtual ~AIModelInformation();

  AIModelInformation(const AIModelInformation& from);

  inline AIModelInformation& operator=(const AIModelInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AIModelInformation(AIModelInformation&& from) noexcept
    : AIModelInformation() {
    *this = ::std::move(from);
  }

  inline AIModelInformation& operator=(AIModelInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AIModelInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIModelInformation* internal_default_instance() {
    return reinterpret_cast<const AIModelInformation*>(
               &_AIModelInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AIModelInformation* other);
  friend void swap(AIModelInformation& a, AIModelInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AIModelInformation* New() const final {
    return CreateMaybeMessage<AIModelInformation>(NULL);
  }

  AIModelInformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AIModelInformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AIModelInformation& from);
  void MergeFrom(const AIModelInformation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIModelInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bigbrain.IOType inputs = 4;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 4;
  ::bigbrain::IOType inputs(int index) const;
  void set_inputs(int index, ::bigbrain::IOType value);
  void add_inputs(::bigbrain::IOType value);
  const ::google::protobuf::RepeatedField<int>& inputs() const;
  ::google::protobuf::RepeatedField<int>* mutable_inputs();

  // repeated .bigbrain.IOType outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 5;
  ::bigbrain::IOType outputs(int index) const;
  void set_outputs(int index, ::bigbrain::IOType value);
  void add_outputs(::bigbrain::IOType value);
  const ::google::protobuf::RepeatedField<int>& outputs() const;
  ::google::protobuf::RepeatedField<int>* mutable_outputs();

  // repeated .bigbrain.IOType update_inputs = 7;
  int update_inputs_size() const;
  void clear_update_inputs();
  static const int kUpdateInputsFieldNumber = 7;
  ::bigbrain::IOType update_inputs(int index) const;
  void set_update_inputs(int index, ::bigbrain::IOType value);
  void add_update_inputs(::bigbrain::IOType value);
  const ::google::protobuf::RepeatedField<int>& update_inputs() const;
  ::google::protobuf::RepeatedField<int>* mutable_update_inputs();

  // repeated .bigbrain.IOType update_outputs = 8;
  int update_outputs_size() const;
  void clear_update_outputs();
  static const int kUpdateOutputsFieldNumber = 8;
  ::bigbrain::IOType update_outputs(int index) const;
  void set_update_outputs(int index, ::bigbrain::IOType value);
  void add_update_outputs(::bigbrain::IOType value);
  const ::google::protobuf::RepeatedField<int>& update_outputs() const;
  ::google::protobuf::RepeatedField<int>* mutable_update_outputs();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bool updateable = 6;
  void clear_updateable();
  static const int kUpdateableFieldNumber = 6;
  bool updateable() const;
  void set_updateable(bool value);

  // @@protoc_insertion_point(class_scope:bigbrain.AIModelInformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> inputs_;
  mutable int _inputs_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> outputs_;
  mutable int _outputs_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> update_inputs_;
  mutable int _update_inputs_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> update_outputs_;
  mutable int _update_outputs_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  bool updateable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bigbrain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AIModelContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigbrain.AIModelContainer) */ {
 public:
  AIModelContainer();
  virtual ~AIModelContainer();

  AIModelContainer(const AIModelContainer& from);

  inline AIModelContainer& operator=(const AIModelContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AIModelContainer(AIModelContainer&& from) noexcept
    : AIModelContainer() {
    *this = ::std::move(from);
  }

  inline AIModelContainer& operator=(AIModelContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AIModelContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIModelContainer* internal_default_instance() {
    return reinterpret_cast<const AIModelContainer*>(
               &_AIModelContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AIModelContainer* other);
  friend void swap(AIModelContainer& a, AIModelContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AIModelContainer* New() const final {
    return CreateMaybeMessage<AIModelContainer>(NULL);
  }

  AIModelContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AIModelContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AIModelContainer& from);
  void MergeFrom(const AIModelContainer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIModelContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // string hash_model = 2;
  void clear_hash_model();
  static const int kHashModelFieldNumber = 2;
  const ::std::string& hash_model() const;
  void set_hash_model(const ::std::string& value);
  #if LANG_CXX11
  void set_hash_model(::std::string&& value);
  #endif
  void set_hash_model(const char* value);
  void set_hash_model(const char* value, size_t size);
  ::std::string* mutable_hash_model();
  ::std::string* release_hash_model();
  void set_allocated_hash_model(::std::string* hash_model);

  // string hash_state = 3;
  void clear_hash_state();
  static const int kHashStateFieldNumber = 3;
  const ::std::string& hash_state() const;
  void set_hash_state(const ::std::string& value);
  #if LANG_CXX11
  void set_hash_state(::std::string&& value);
  #endif
  void set_hash_state(const char* value);
  void set_hash_state(const char* value, size_t size);
  ::std::string* mutable_hash_state();
  ::std::string* release_hash_state();
  void set_allocated_hash_state(::std::string* hash_state);

  // string timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // bytes model = 5;
  void clear_model();
  static const int kModelFieldNumber = 5;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const void* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // bytes state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // bytes other = 7;
  void clear_other();
  static const int kOtherFieldNumber = 7;
  const ::std::string& other() const;
  void set_other(const ::std::string& value);
  #if LANG_CXX11
  void set_other(::std::string&& value);
  #endif
  void set_other(const char* value);
  void set_other(const void* value, size_t size);
  ::std::string* mutable_other();
  ::std::string* release_other();
  void set_allocated_other(::std::string* other);

  // @@protoc_insertion_point(class_scope:bigbrain.AIModelContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr hash_model_;
  ::google::protobuf::internal::ArenaStringPtr hash_state_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr other_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bigbrain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AICapabilityRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigbrain.AICapabilityRequest) */ {
 public:
  AICapabilityRequest();
  virtual ~AICapabilityRequest();

  AICapabilityRequest(const AICapabilityRequest& from);

  inline AICapabilityRequest& operator=(const AICapabilityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AICapabilityRequest(AICapabilityRequest&& from) noexcept
    : AICapabilityRequest() {
    *this = ::std::move(from);
  }

  inline AICapabilityRequest& operator=(AICapabilityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AICapabilityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AICapabilityRequest* internal_default_instance() {
    return reinterpret_cast<const AICapabilityRequest*>(
               &_AICapabilityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AICapabilityRequest* other);
  friend void swap(AICapabilityRequest& a, AICapabilityRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AICapabilityRequest* New() const final {
    return CreateMaybeMessage<AICapabilityRequest>(NULL);
  }

  AICapabilityRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AICapabilityRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AICapabilityRequest& from);
  void MergeFrom(const AICapabilityRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AICapabilityRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bigbrain.AICapabilityRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bigbrain_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AICapabilityResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigbrain.AICapabilityResponse) */ {
 public:
  AICapabilityResponse();
  virtual ~AICapabilityResponse();

  AICapabilityResponse(const AICapabilityResponse& from);

  inline AICapabilityResponse& operator=(const AICapabilityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AICapabilityResponse(AICapabilityResponse&& from) noexcept
    : AICapabilityResponse() {
    *this = ::std::move(from);
  }

  inline AICapabilityResponse& operator=(AICapabilityResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AICapabilityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AICapabilityResponse* internal_default_instance() {
    return reinterpret_cast<const AICapabilityResponse*>(
               &_AICapabilityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AICapabilityResponse* other);
  friend void swap(AICapabilityResponse& a, AICapabilityResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AICapabilityResponse* New() const final {
    return CreateMaybeMessage<AICapabilityResponse>(NULL);
  }

  AICapabilityResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AICapabilityResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AICapabilityResponse& from);
  void MergeFrom(const AICapabilityResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AICapabilityResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bigbrain.AIModelInformation models_information = 1;
  int models_information_size() const;
  void clear_models_information();
  static const int kModelsInformationFieldNumber = 1;
  ::bigbrain::AIModelInformation* mutable_models_information(int index);
  ::google::protobuf::RepeatedPtrField< ::bigbrain::AIModelInformation >*
      mutable_models_information();
  const ::bigbrain::AIModelInformation& models_information(int index) const;
  ::bigbrain::AIModelInformation* add_models_information();
  const ::google::protobuf::RepeatedPtrField< ::bigbrain::AIModelInformation >&
      models_information() const;

  // @@protoc_insertion_point(class_scope:bigbrain.AICapabilityResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bigbrain::AIModelInformation > models_information_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bigbrain_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AICapability

// .bigbrain.AIModelInformation information = 1;
inline bool AICapability::has_information() const {
  return this != internal_default_instance() && information_ != NULL;
}
inline void AICapability::clear_information() {
  if (GetArenaNoVirtual() == NULL && information_ != NULL) {
    delete information_;
  }
  information_ = NULL;
}
inline const ::bigbrain::AIModelInformation& AICapability::_internal_information() const {
  return *information_;
}
inline const ::bigbrain::AIModelInformation& AICapability::information() const {
  const ::bigbrain::AIModelInformation* p = information_;
  // @@protoc_insertion_point(field_get:bigbrain.AICapability.information)
  return p != NULL ? *p : *reinterpret_cast<const ::bigbrain::AIModelInformation*>(
      &::bigbrain::_AIModelInformation_default_instance_);
}
inline ::bigbrain::AIModelInformation* AICapability::release_information() {
  // @@protoc_insertion_point(field_release:bigbrain.AICapability.information)
  
  ::bigbrain::AIModelInformation* temp = information_;
  information_ = NULL;
  return temp;
}
inline ::bigbrain::AIModelInformation* AICapability::mutable_information() {
  
  if (information_ == NULL) {
    auto* p = CreateMaybeMessage<::bigbrain::AIModelInformation>(GetArenaNoVirtual());
    information_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bigbrain.AICapability.information)
  return information_;
}
inline void AICapability::set_allocated_information(::bigbrain::AIModelInformation* information) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete information_;
  }
  if (information) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      information = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, information, submessage_arena);
    }
    
  } else {
    
  }
  information_ = information;
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AICapability.information)
}

// .bigbrain.AIModelContainer container = 2;
inline bool AICapability::has_container() const {
  return this != internal_default_instance() && container_ != NULL;
}
inline void AICapability::clear_container() {
  if (GetArenaNoVirtual() == NULL && container_ != NULL) {
    delete container_;
  }
  container_ = NULL;
}
inline const ::bigbrain::AIModelContainer& AICapability::_internal_container() const {
  return *container_;
}
inline const ::bigbrain::AIModelContainer& AICapability::container() const {
  const ::bigbrain::AIModelContainer* p = container_;
  // @@protoc_insertion_point(field_get:bigbrain.AICapability.container)
  return p != NULL ? *p : *reinterpret_cast<const ::bigbrain::AIModelContainer*>(
      &::bigbrain::_AIModelContainer_default_instance_);
}
inline ::bigbrain::AIModelContainer* AICapability::release_container() {
  // @@protoc_insertion_point(field_release:bigbrain.AICapability.container)
  
  ::bigbrain::AIModelContainer* temp = container_;
  container_ = NULL;
  return temp;
}
inline ::bigbrain::AIModelContainer* AICapability::mutable_container() {
  
  if (container_ == NULL) {
    auto* p = CreateMaybeMessage<::bigbrain::AIModelContainer>(GetArenaNoVirtual());
    container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bigbrain.AICapability.container)
  return container_;
}
inline void AICapability::set_allocated_container(::bigbrain::AIModelContainer* container) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete container_;
  }
  if (container) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      container = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    
  } else {
    
  }
  container_ = container;
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AICapability.container)
}

// -------------------------------------------------------------------

// AIModelInformation

// string name = 1;
inline void AIModelInformation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelInformation::name() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelInformation.name)
  return name_.GetNoArena();
}
inline void AIModelInformation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelInformation.name)
}
#if LANG_CXX11
inline void AIModelInformation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelInformation.name)
}
#endif
inline void AIModelInformation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelInformation.name)
}
inline void AIModelInformation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelInformation.name)
}
inline ::std::string* AIModelInformation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelInformation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelInformation::release_name() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelInformation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelInformation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelInformation.name)
}

// string description = 2;
inline void AIModelInformation::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelInformation::description() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelInformation.description)
  return description_.GetNoArena();
}
inline void AIModelInformation::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelInformation.description)
}
#if LANG_CXX11
inline void AIModelInformation::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelInformation.description)
}
#endif
inline void AIModelInformation::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelInformation.description)
}
inline void AIModelInformation::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelInformation.description)
}
inline ::std::string* AIModelInformation::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelInformation.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelInformation::release_description() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelInformation.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelInformation::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelInformation.description)
}

// string path = 3;
inline void AIModelInformation::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelInformation::path() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelInformation.path)
  return path_.GetNoArena();
}
inline void AIModelInformation::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelInformation.path)
}
#if LANG_CXX11
inline void AIModelInformation::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelInformation.path)
}
#endif
inline void AIModelInformation::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelInformation.path)
}
inline void AIModelInformation::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelInformation.path)
}
inline ::std::string* AIModelInformation::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelInformation.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelInformation::release_path() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelInformation.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelInformation::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelInformation.path)
}

// repeated .bigbrain.IOType inputs = 4;
inline int AIModelInformation::inputs_size() const {
  return inputs_.size();
}
inline void AIModelInformation::clear_inputs() {
  inputs_.Clear();
}
inline ::bigbrain::IOType AIModelInformation::inputs(int index) const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelInformation.inputs)
  return static_cast< ::bigbrain::IOType >(inputs_.Get(index));
}
inline void AIModelInformation::set_inputs(int index, ::bigbrain::IOType value) {
  inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelInformation.inputs)
}
inline void AIModelInformation::add_inputs(::bigbrain::IOType value) {
  inputs_.Add(value);
  // @@protoc_insertion_point(field_add:bigbrain.AIModelInformation.inputs)
}
inline const ::google::protobuf::RepeatedField<int>&
AIModelInformation::inputs() const {
  // @@protoc_insertion_point(field_list:bigbrain.AIModelInformation.inputs)
  return inputs_;
}
inline ::google::protobuf::RepeatedField<int>*
AIModelInformation::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:bigbrain.AIModelInformation.inputs)
  return &inputs_;
}

// repeated .bigbrain.IOType outputs = 5;
inline int AIModelInformation::outputs_size() const {
  return outputs_.size();
}
inline void AIModelInformation::clear_outputs() {
  outputs_.Clear();
}
inline ::bigbrain::IOType AIModelInformation::outputs(int index) const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelInformation.outputs)
  return static_cast< ::bigbrain::IOType >(outputs_.Get(index));
}
inline void AIModelInformation::set_outputs(int index, ::bigbrain::IOType value) {
  outputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelInformation.outputs)
}
inline void AIModelInformation::add_outputs(::bigbrain::IOType value) {
  outputs_.Add(value);
  // @@protoc_insertion_point(field_add:bigbrain.AIModelInformation.outputs)
}
inline const ::google::protobuf::RepeatedField<int>&
AIModelInformation::outputs() const {
  // @@protoc_insertion_point(field_list:bigbrain.AIModelInformation.outputs)
  return outputs_;
}
inline ::google::protobuf::RepeatedField<int>*
AIModelInformation::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:bigbrain.AIModelInformation.outputs)
  return &outputs_;
}

// bool updateable = 6;
inline void AIModelInformation::clear_updateable() {
  updateable_ = false;
}
inline bool AIModelInformation::updateable() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelInformation.updateable)
  return updateable_;
}
inline void AIModelInformation::set_updateable(bool value) {
  
  updateable_ = value;
  // @@protoc_insertion_point(field_set:bigbrain.AIModelInformation.updateable)
}

// repeated .bigbrain.IOType update_inputs = 7;
inline int AIModelInformation::update_inputs_size() const {
  return update_inputs_.size();
}
inline void AIModelInformation::clear_update_inputs() {
  update_inputs_.Clear();
}
inline ::bigbrain::IOType AIModelInformation::update_inputs(int index) const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelInformation.update_inputs)
  return static_cast< ::bigbrain::IOType >(update_inputs_.Get(index));
}
inline void AIModelInformation::set_update_inputs(int index, ::bigbrain::IOType value) {
  update_inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelInformation.update_inputs)
}
inline void AIModelInformation::add_update_inputs(::bigbrain::IOType value) {
  update_inputs_.Add(value);
  // @@protoc_insertion_point(field_add:bigbrain.AIModelInformation.update_inputs)
}
inline const ::google::protobuf::RepeatedField<int>&
AIModelInformation::update_inputs() const {
  // @@protoc_insertion_point(field_list:bigbrain.AIModelInformation.update_inputs)
  return update_inputs_;
}
inline ::google::protobuf::RepeatedField<int>*
AIModelInformation::mutable_update_inputs() {
  // @@protoc_insertion_point(field_mutable_list:bigbrain.AIModelInformation.update_inputs)
  return &update_inputs_;
}

// repeated .bigbrain.IOType update_outputs = 8;
inline int AIModelInformation::update_outputs_size() const {
  return update_outputs_.size();
}
inline void AIModelInformation::clear_update_outputs() {
  update_outputs_.Clear();
}
inline ::bigbrain::IOType AIModelInformation::update_outputs(int index) const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelInformation.update_outputs)
  return static_cast< ::bigbrain::IOType >(update_outputs_.Get(index));
}
inline void AIModelInformation::set_update_outputs(int index, ::bigbrain::IOType value) {
  update_outputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelInformation.update_outputs)
}
inline void AIModelInformation::add_update_outputs(::bigbrain::IOType value) {
  update_outputs_.Add(value);
  // @@protoc_insertion_point(field_add:bigbrain.AIModelInformation.update_outputs)
}
inline const ::google::protobuf::RepeatedField<int>&
AIModelInformation::update_outputs() const {
  // @@protoc_insertion_point(field_list:bigbrain.AIModelInformation.update_outputs)
  return update_outputs_;
}
inline ::google::protobuf::RepeatedField<int>*
AIModelInformation::mutable_update_outputs() {
  // @@protoc_insertion_point(field_mutable_list:bigbrain.AIModelInformation.update_outputs)
  return &update_outputs_;
}

// -------------------------------------------------------------------

// AIModelContainer

// string hash = 1;
inline void AIModelContainer::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelContainer::hash() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelContainer.hash)
  return hash_.GetNoArena();
}
inline void AIModelContainer::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelContainer.hash)
}
#if LANG_CXX11
inline void AIModelContainer::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelContainer.hash)
}
#endif
inline void AIModelContainer::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelContainer.hash)
}
inline void AIModelContainer::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelContainer.hash)
}
inline ::std::string* AIModelContainer::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelContainer.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelContainer::release_hash() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelContainer.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelContainer::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelContainer.hash)
}

// string hash_model = 2;
inline void AIModelContainer::clear_hash_model() {
  hash_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelContainer::hash_model() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelContainer.hash_model)
  return hash_model_.GetNoArena();
}
inline void AIModelContainer::set_hash_model(const ::std::string& value) {
  
  hash_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelContainer.hash_model)
}
#if LANG_CXX11
inline void AIModelContainer::set_hash_model(::std::string&& value) {
  
  hash_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelContainer.hash_model)
}
#endif
inline void AIModelContainer::set_hash_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelContainer.hash_model)
}
inline void AIModelContainer::set_hash_model(const char* value, size_t size) {
  
  hash_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelContainer.hash_model)
}
inline ::std::string* AIModelContainer::mutable_hash_model() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelContainer.hash_model)
  return hash_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelContainer::release_hash_model() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelContainer.hash_model)
  
  return hash_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelContainer::set_allocated_hash_model(::std::string* hash_model) {
  if (hash_model != NULL) {
    
  } else {
    
  }
  hash_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_model);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelContainer.hash_model)
}

// string hash_state = 3;
inline void AIModelContainer::clear_hash_state() {
  hash_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelContainer::hash_state() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelContainer.hash_state)
  return hash_state_.GetNoArena();
}
inline void AIModelContainer::set_hash_state(const ::std::string& value) {
  
  hash_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelContainer.hash_state)
}
#if LANG_CXX11
inline void AIModelContainer::set_hash_state(::std::string&& value) {
  
  hash_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelContainer.hash_state)
}
#endif
inline void AIModelContainer::set_hash_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelContainer.hash_state)
}
inline void AIModelContainer::set_hash_state(const char* value, size_t size) {
  
  hash_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelContainer.hash_state)
}
inline ::std::string* AIModelContainer::mutable_hash_state() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelContainer.hash_state)
  return hash_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelContainer::release_hash_state() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelContainer.hash_state)
  
  return hash_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelContainer::set_allocated_hash_state(::std::string* hash_state) {
  if (hash_state != NULL) {
    
  } else {
    
  }
  hash_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_state);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelContainer.hash_state)
}

// string timestamp = 4;
inline void AIModelContainer::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelContainer::timestamp() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelContainer.timestamp)
  return timestamp_.GetNoArena();
}
inline void AIModelContainer::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelContainer.timestamp)
}
#if LANG_CXX11
inline void AIModelContainer::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelContainer.timestamp)
}
#endif
inline void AIModelContainer::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelContainer.timestamp)
}
inline void AIModelContainer::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelContainer.timestamp)
}
inline ::std::string* AIModelContainer::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelContainer.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelContainer::release_timestamp() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelContainer.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelContainer::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelContainer.timestamp)
}

// bytes model = 5;
inline void AIModelContainer::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelContainer::model() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelContainer.model)
  return model_.GetNoArena();
}
inline void AIModelContainer::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelContainer.model)
}
#if LANG_CXX11
inline void AIModelContainer::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelContainer.model)
}
#endif
inline void AIModelContainer::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelContainer.model)
}
inline void AIModelContainer::set_model(const void* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelContainer.model)
}
inline ::std::string* AIModelContainer::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelContainer.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelContainer::release_model() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelContainer.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelContainer::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelContainer.model)
}

// bytes state = 6;
inline void AIModelContainer::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelContainer::state() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelContainer.state)
  return state_.GetNoArena();
}
inline void AIModelContainer::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelContainer.state)
}
#if LANG_CXX11
inline void AIModelContainer::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelContainer.state)
}
#endif
inline void AIModelContainer::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelContainer.state)
}
inline void AIModelContainer::set_state(const void* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelContainer.state)
}
inline ::std::string* AIModelContainer::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelContainer.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelContainer::release_state() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelContainer.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelContainer::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelContainer.state)
}

// bytes other = 7;
inline void AIModelContainer::clear_other() {
  other_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIModelContainer::other() const {
  // @@protoc_insertion_point(field_get:bigbrain.AIModelContainer.other)
  return other_.GetNoArena();
}
inline void AIModelContainer::set_other(const ::std::string& value) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigbrain.AIModelContainer.other)
}
#if LANG_CXX11
inline void AIModelContainer::set_other(::std::string&& value) {
  
  other_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigbrain.AIModelContainer.other)
}
#endif
inline void AIModelContainer::set_other(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigbrain.AIModelContainer.other)
}
inline void AIModelContainer::set_other(const void* value, size_t size) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigbrain.AIModelContainer.other)
}
inline ::std::string* AIModelContainer::mutable_other() {
  
  // @@protoc_insertion_point(field_mutable:bigbrain.AIModelContainer.other)
  return other_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIModelContainer::release_other() {
  // @@protoc_insertion_point(field_release:bigbrain.AIModelContainer.other)
  
  return other_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIModelContainer::set_allocated_other(::std::string* other) {
  if (other != NULL) {
    
  } else {
    
  }
  other_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other);
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIModelContainer.other)
}

// -------------------------------------------------------------------

// AICapabilityRequest

// -------------------------------------------------------------------

// AICapabilityResponse

// repeated .bigbrain.AIModelInformation models_information = 1;
inline int AICapabilityResponse::models_information_size() const {
  return models_information_.size();
}
inline void AICapabilityResponse::clear_models_information() {
  models_information_.Clear();
}
inline ::bigbrain::AIModelInformation* AICapabilityResponse::mutable_models_information(int index) {
  // @@protoc_insertion_point(field_mutable:bigbrain.AICapabilityResponse.models_information)
  return models_information_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bigbrain::AIModelInformation >*
AICapabilityResponse::mutable_models_information() {
  // @@protoc_insertion_point(field_mutable_list:bigbrain.AICapabilityResponse.models_information)
  return &models_information_;
}
inline const ::bigbrain::AIModelInformation& AICapabilityResponse::models_information(int index) const {
  // @@protoc_insertion_point(field_get:bigbrain.AICapabilityResponse.models_information)
  return models_information_.Get(index);
}
inline ::bigbrain::AIModelInformation* AICapabilityResponse::add_models_information() {
  // @@protoc_insertion_point(field_add:bigbrain.AICapabilityResponse.models_information)
  return models_information_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bigbrain::AIModelInformation >&
AICapabilityResponse::models_information() const {
  // @@protoc_insertion_point(field_list:bigbrain.AICapabilityResponse.models_information)
  return models_information_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bigbrain

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bigbrain::IOType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bigbrain::IOType>() {
  return ::bigbrain::IOType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bigbrain_2eproto
