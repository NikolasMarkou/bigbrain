// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bigbrain.proto
#ifndef GRPC_bigbrain_2eproto__INCLUDED
#define GRPC_bigbrain_2eproto__INCLUDED

#include "bigbrain.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace bigbrain {

class AIService final {
 public:
  static constexpr char const* service_full_name() {
    return "bigbrain.AIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::bigbrain::AIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>> AsyncReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>>(AsyncReportCapabilitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>> PrepareAsyncReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>>(PrepareAsyncReportCapabilitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::bigbrain::AIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>> AsyncRegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>>(AsyncRegisterCapabilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>> PrepareAsyncRegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>>(PrepareAsyncRegisterCapabilityRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest* request, ::bigbrain::AIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigbrain::AIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest* request, ::bigbrain::AIResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ReportCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigbrain::AIResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability* request, ::bigbrain::AIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterCapability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigbrain::AIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability* request, ::bigbrain::AIResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterCapability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigbrain::AIResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>* AsyncReportCapabilitiesRaw(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>* PrepareAsyncReportCapabilitiesRaw(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>* AsyncRegisterCapabilityRaw(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigbrain::AIResponse>* PrepareAsyncRegisterCapabilityRaw(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::bigbrain::AIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>> AsyncReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>>(AsyncReportCapabilitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>> PrepareAsyncReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>>(PrepareAsyncReportCapabilitiesRaw(context, request, cq));
    }
    ::grpc::Status RegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::bigbrain::AIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>> AsyncRegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>>(AsyncRegisterCapabilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>> PrepareAsyncRegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>>(PrepareAsyncRegisterCapabilityRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest* request, ::bigbrain::AIResponse* response, std::function<void(::grpc::Status)>) override;
      void ReportCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigbrain::AIResponse* response, std::function<void(::grpc::Status)>) override;
      void ReportCapabilities(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest* request, ::bigbrain::AIResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ReportCapabilities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigbrain::AIResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability* request, ::bigbrain::AIResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterCapability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigbrain::AIResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterCapability(::grpc::ClientContext* context, const ::bigbrain::AICapability* request, ::bigbrain::AIResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RegisterCapability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigbrain::AIResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>* AsyncReportCapabilitiesRaw(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>* PrepareAsyncReportCapabilitiesRaw(::grpc::ClientContext* context, const ::bigbrain::AICapabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>* AsyncRegisterCapabilityRaw(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigbrain::AIResponse>* PrepareAsyncRegisterCapabilityRaw(::grpc::ClientContext* context, const ::bigbrain::AICapability& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReportCapabilities_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterCapability_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReportCapabilities(::grpc::ServerContext* context, const ::bigbrain::AICapabilityRequest* request, ::bigbrain::AIResponse* response);
    virtual ::grpc::Status RegisterCapability(::grpc::ServerContext* context, const ::bigbrain::AICapability* request, ::bigbrain::AIResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportCapabilities() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReportCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCapabilities(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapabilityRequest* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportCapabilities(::grpc::ServerContext* context, ::bigbrain::AICapabilityRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigbrain::AIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterCapability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterCapability() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterCapability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCapability(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapability* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterCapability(::grpc::ServerContext* context, ::bigbrain::AICapability* request, ::grpc::ServerAsyncResponseWriter< ::bigbrain::AIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReportCapabilities<WithAsyncMethod_RegisterCapability<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReportCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReportCapabilities() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::bigbrain::AICapabilityRequest, ::bigbrain::AIResponse>(
          [this](::grpc::ServerContext* context,
                 const ::bigbrain::AICapabilityRequest* request,
                 ::bigbrain::AIResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReportCapabilities(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ReportCapabilities(
        ::grpc::experimental::MessageAllocator< ::bigbrain::AICapabilityRequest, ::bigbrain::AIResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bigbrain::AICapabilityRequest, ::bigbrain::AIResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReportCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCapabilities(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapabilityRequest* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportCapabilities(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapabilityRequest* /*request*/, ::bigbrain::AIResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterCapability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterCapability() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::bigbrain::AICapability, ::bigbrain::AIResponse>(
          [this](::grpc::ServerContext* context,
                 const ::bigbrain::AICapability* request,
                 ::bigbrain::AIResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RegisterCapability(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RegisterCapability(
        ::grpc::experimental::MessageAllocator< ::bigbrain::AICapability, ::bigbrain::AIResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bigbrain::AICapability, ::bigbrain::AIResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterCapability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCapability(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapability* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RegisterCapability(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapability* /*request*/, ::bigbrain::AIResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ReportCapabilities<ExperimentalWithCallbackMethod_RegisterCapability<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReportCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportCapabilities() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReportCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCapabilities(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapabilityRequest* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterCapability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterCapability() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterCapability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCapability(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapability* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportCapabilities() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReportCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCapabilities(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapabilityRequest* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportCapabilities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterCapability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterCapability() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterCapability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCapability(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapability* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterCapability(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReportCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReportCapabilities() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReportCapabilities(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReportCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCapabilities(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapabilityRequest* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportCapabilities(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterCapability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterCapability() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RegisterCapability(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterCapability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCapability(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapability* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RegisterCapability(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportCapabilities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportCapabilities() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::bigbrain::AICapabilityRequest, ::bigbrain::AIResponse>(std::bind(&WithStreamedUnaryMethod_ReportCapabilities<BaseClass>::StreamedReportCapabilities, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportCapabilities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportCapabilities(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapabilityRequest* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportCapabilities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigbrain::AICapabilityRequest,::bigbrain::AIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterCapability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterCapability() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::bigbrain::AICapability, ::bigbrain::AIResponse>(std::bind(&WithStreamedUnaryMethod_RegisterCapability<BaseClass>::StreamedRegisterCapability, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterCapability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterCapability(::grpc::ServerContext* /*context*/, const ::bigbrain::AICapability* /*request*/, ::bigbrain::AIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterCapability(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigbrain::AICapability,::bigbrain::AIResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReportCapabilities<WithStreamedUnaryMethod_RegisterCapability<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReportCapabilities<WithStreamedUnaryMethod_RegisterCapability<Service > > StreamedService;
};

}  // namespace bigbrain


#endif  // GRPC_bigbrain_2eproto__INCLUDED
