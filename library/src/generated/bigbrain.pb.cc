// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bigbrain.proto

#include "bigbrain.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bigbrain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AICapability_bigbrain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bigbrain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIModelContainer_bigbrain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bigbrain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIModelFramework_bigbrain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bigbrain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIModelIO_bigbrain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bigbrain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AIModelInformation_bigbrain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bigbrain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AIModelsInformation_bigbrain_2eproto;
namespace bigbrain {
class AIModelIODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIModelIO> _instance;
} _AIModelIO_default_instance_;
class AIModelFrameworkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIModelFramework> _instance;
} _AIModelFramework_default_instance_;
class AICapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AICapability> _instance;
} _AICapability_default_instance_;
class AIModelInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIModelInformation> _instance;
} _AIModelInformation_default_instance_;
class AIModelContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIModelContainer> _instance;
} _AIModelContainer_default_instance_;
class AICapabilityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AICapabilityRequest> _instance;
} _AICapabilityRequest_default_instance_;
class AIModelsInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIModelsInformation> _instance;
} _AIModelsInformation_default_instance_;
class AIResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIResponse> _instance;
  const ::bigbrain::AICapability* model_;
  const ::bigbrain::AIModelsInformation* models_information_;
} _AIResponse_default_instance_;
}  // namespace bigbrain
static void InitDefaultsscc_info_AICapability_bigbrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bigbrain::_AICapability_default_instance_;
    new (ptr) ::bigbrain::AICapability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bigbrain::AICapability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AICapability_bigbrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AICapability_bigbrain_2eproto}, {
      &scc_info_AIModelInformation_bigbrain_2eproto.base,
      &scc_info_AIModelContainer_bigbrain_2eproto.base,}};

static void InitDefaultsscc_info_AICapabilityRequest_bigbrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bigbrain::_AICapabilityRequest_default_instance_;
    new (ptr) ::bigbrain::AICapabilityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bigbrain::AICapabilityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AICapabilityRequest_bigbrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AICapabilityRequest_bigbrain_2eproto}, {}};

static void InitDefaultsscc_info_AIModelContainer_bigbrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bigbrain::_AIModelContainer_default_instance_;
    new (ptr) ::bigbrain::AIModelContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bigbrain::AIModelContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIModelContainer_bigbrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AIModelContainer_bigbrain_2eproto}, {}};

static void InitDefaultsscc_info_AIModelFramework_bigbrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bigbrain::_AIModelFramework_default_instance_;
    new (ptr) ::bigbrain::AIModelFramework();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bigbrain::AIModelFramework::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIModelFramework_bigbrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AIModelFramework_bigbrain_2eproto}, {}};

static void InitDefaultsscc_info_AIModelIO_bigbrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bigbrain::_AIModelIO_default_instance_;
    new (ptr) ::bigbrain::AIModelIO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bigbrain::AIModelIO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AIModelIO_bigbrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AIModelIO_bigbrain_2eproto}, {}};

static void InitDefaultsscc_info_AIModelInformation_bigbrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bigbrain::_AIModelInformation_default_instance_;
    new (ptr) ::bigbrain::AIModelInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bigbrain::AIModelInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AIModelInformation_bigbrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AIModelInformation_bigbrain_2eproto}, {
      &scc_info_AIModelFramework_bigbrain_2eproto.base,
      &scc_info_AIModelIO_bigbrain_2eproto.base,}};

static void InitDefaultsscc_info_AIModelsInformation_bigbrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bigbrain::_AIModelsInformation_default_instance_;
    new (ptr) ::bigbrain::AIModelsInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bigbrain::AIModelsInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AIModelsInformation_bigbrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AIModelsInformation_bigbrain_2eproto}, {
      &scc_info_AIModelInformation_bigbrain_2eproto.base,}};

static void InitDefaultsscc_info_AIResponse_bigbrain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bigbrain::_AIResponse_default_instance_;
    new (ptr) ::bigbrain::AIResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bigbrain::AIResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AIResponse_bigbrain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AIResponse_bigbrain_2eproto}, {
      &scc_info_AICapability_bigbrain_2eproto.base,
      &scc_info_AIModelsInformation_bigbrain_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bigbrain_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bigbrain_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bigbrain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bigbrain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelIO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelIO, type_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelIO, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelFramework, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelFramework, framework_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelFramework, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AICapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AICapability, information_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AICapability, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, name_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, description_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, path_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, framework_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, inputs_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, outputs_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, updateable_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, update_inputs_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelInformation, update_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelContainer, hash_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelContainer, hash_model_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelContainer, hash_state_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelContainer, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelContainer, model_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelContainer, state_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelContainer, other_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AICapabilityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelsInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIModelsInformation, model_information_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIResponse, success_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIResponse, error_),
  offsetof(::bigbrain::AIResponseDefaultTypeInternal, model_),
  offsetof(::bigbrain::AIResponseDefaultTypeInternal, models_information_),
  PROTOBUF_FIELD_OFFSET(::bigbrain::AIResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bigbrain::AIModelIO)},
  { 7, -1, sizeof(::bigbrain::AIModelFramework)},
  { 14, -1, sizeof(::bigbrain::AICapability)},
  { 21, -1, sizeof(::bigbrain::AIModelInformation)},
  { 35, -1, sizeof(::bigbrain::AIModelContainer)},
  { 47, -1, sizeof(::bigbrain::AICapabilityRequest)},
  { 52, -1, sizeof(::bigbrain::AIModelsInformation)},
  { 58, -1, sizeof(::bigbrain::AIResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bigbrain::_AIModelIO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bigbrain::_AIModelFramework_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bigbrain::_AICapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bigbrain::_AIModelInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bigbrain::_AIModelContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bigbrain::_AICapabilityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bigbrain::_AIModelsInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bigbrain::_AIResponse_default_instance_),
};

const char descriptor_table_protodef_bigbrain_2eproto[] =
  "\n\016bigbrain.proto\022\010bigbrain\"\245\001\n\tAIModelIO"
  "\022(\n\004type\030\001 \001(\0162\032.bigbrain.AIModelIO.IOTy"
  "pe\022\014\n\004name\030\002 \001(\t\"`\n\006IOType\022\t\n\005OTHER\020\000\022\t\n"
  "\005IMAGE\020\001\022\010\n\004TEXT\020\002\022\t\n\005AUDIO\020\003\022\t\n\005GRAPH\020\004"
  "\022\n\n\006VECTOR\020\005\022\n\n\006MATRIX\020\006\022\010\n\004BBOX\020\007\"\233\001\n\020A"
  "IModelFramework\022<\n\tframework\030\001 \001(\0162).big"
  "brain.AIModelFramework.ModelFramework\022\017\n"
  "\007version\030\002 \001(\t\"8\n\016ModelFramework\022\t\n\005OTHE"
  "R\020\000\022\016\n\nTENSORFLOW\020\001\022\013\n\007PYTORCH\020\002\"p\n\014AICa"
  "pability\0221\n\013information\030\001 \001(\0132\034.bigbrain"
  ".AIModelInformation\022-\n\tcontainer\030\002 \001(\0132\032"
  ".bigbrain.AIModelContainer\"\254\002\n\022AIModelIn"
  "formation\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002"
  " \001(\t\022\014\n\004path\030\003 \001(\t\022-\n\tframework\030\004 \001(\0132\032."
  "bigbrain.AIModelFramework\022#\n\006inputs\030\005 \003("
  "\0132\023.bigbrain.AIModelIO\022$\n\007outputs\030\006 \003(\0132"
  "\023.bigbrain.AIModelIO\022\022\n\nupdateable\030\007 \001(\010"
  "\022*\n\rupdate_inputs\030\010 \003(\0132\023.bigbrain.AIMod"
  "elIO\022+\n\016update_outputs\030\t \003(\0132\023.bigbrain."
  "AIModelIO\"\210\001\n\020AIModelContainer\022\014\n\004hash\030\001"
  " \001(\t\022\022\n\nhash_model\030\002 \001(\t\022\022\n\nhash_state\030\003"
  " \001(\t\022\021\n\ttimestamp\030\004 \001(\t\022\r\n\005model\030\005 \001(\014\022\r"
  "\n\005state\030\006 \001(\014\022\r\n\005other\030\007 \001(\014\"\025\n\023AICapabi"
  "lityRequest\"N\n\023AIModelsInformation\0227\n\021mo"
  "del_information\030\001 \003(\0132\034.bigbrain.AIModel"
  "Information\"\234\001\n\nAIResponse\022\017\n\007success\030\001 "
  "\001(\010\022\r\n\005error\030\002 \001(\t\022\'\n\005model\030\003 \001(\0132\026.bigb"
  "rain.AICapabilityH\000\022;\n\022models_informatio"
  "n\030\004 \001(\0132\035.bigbrain.AIModelsInformationH\000"
  "B\010\n\006result2\236\001\n\tAIService\022K\n\022ReportCapabi"
  "lities\022\035.bigbrain.AICapabilityRequest\032\024."
  "bigbrain.AIResponse\"\000\022D\n\022RegisterCapabil"
  "ity\022\026.bigbrain.AICapability\032\024.bigbrain.A"
  "IResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bigbrain_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bigbrain_2eproto_sccs[8] = {
  &scc_info_AICapability_bigbrain_2eproto.base,
  &scc_info_AICapabilityRequest_bigbrain_2eproto.base,
  &scc_info_AIModelContainer_bigbrain_2eproto.base,
  &scc_info_AIModelFramework_bigbrain_2eproto.base,
  &scc_info_AIModelIO_bigbrain_2eproto.base,
  &scc_info_AIModelInformation_bigbrain_2eproto.base,
  &scc_info_AIModelsInformation_bigbrain_2eproto.base,
  &scc_info_AIResponse_bigbrain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bigbrain_2eproto_once;
static bool descriptor_table_bigbrain_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bigbrain_2eproto = {
  &descriptor_table_bigbrain_2eproto_initialized, descriptor_table_protodef_bigbrain_2eproto, "bigbrain.proto", 1339,
  &descriptor_table_bigbrain_2eproto_once, descriptor_table_bigbrain_2eproto_sccs, descriptor_table_bigbrain_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_bigbrain_2eproto::offsets,
  file_level_metadata_bigbrain_2eproto, 8, file_level_enum_descriptors_bigbrain_2eproto, file_level_service_descriptors_bigbrain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bigbrain_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bigbrain_2eproto), true);
namespace bigbrain {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIModelIO_IOType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bigbrain_2eproto);
  return file_level_enum_descriptors_bigbrain_2eproto[0];
}
bool AIModelIO_IOType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AIModelIO_IOType AIModelIO::OTHER;
constexpr AIModelIO_IOType AIModelIO::IMAGE;
constexpr AIModelIO_IOType AIModelIO::TEXT;
constexpr AIModelIO_IOType AIModelIO::AUDIO;
constexpr AIModelIO_IOType AIModelIO::GRAPH;
constexpr AIModelIO_IOType AIModelIO::VECTOR;
constexpr AIModelIO_IOType AIModelIO::MATRIX;
constexpr AIModelIO_IOType AIModelIO::BBOX;
constexpr AIModelIO_IOType AIModelIO::IOType_MIN;
constexpr AIModelIO_IOType AIModelIO::IOType_MAX;
constexpr int AIModelIO::IOType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIModelFramework_ModelFramework_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bigbrain_2eproto);
  return file_level_enum_descriptors_bigbrain_2eproto[1];
}
bool AIModelFramework_ModelFramework_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AIModelFramework_ModelFramework AIModelFramework::OTHER;
constexpr AIModelFramework_ModelFramework AIModelFramework::TENSORFLOW;
constexpr AIModelFramework_ModelFramework AIModelFramework::PYTORCH;
constexpr AIModelFramework_ModelFramework AIModelFramework::ModelFramework_MIN;
constexpr AIModelFramework_ModelFramework AIModelFramework::ModelFramework_MAX;
constexpr int AIModelFramework::ModelFramework_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AIModelIO::InitAsDefaultInstance() {
}
class AIModelIO::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIModelIO::kTypeFieldNumber;
const int AIModelIO::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIModelIO::AIModelIO()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bigbrain.AIModelIO)
}
AIModelIO::AIModelIO(const AIModelIO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:bigbrain.AIModelIO)
}

void AIModelIO::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AIModelIO_bigbrain_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AIModelIO::~AIModelIO() {
  // @@protoc_insertion_point(destructor:bigbrain.AIModelIO)
  SharedDtor();
}

void AIModelIO::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AIModelIO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIModelIO& AIModelIO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIModelIO_bigbrain_2eproto.base);
  return *internal_default_instance();
}


void AIModelIO::Clear() {
// @@protoc_insertion_point(message_clear_start:bigbrain.AIModelIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AIModelIO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bigbrain.AIModelIO.IOType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::bigbrain::AIModelIO_IOType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "bigbrain.AIModelIO.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AIModelIO::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:bigbrain.AIModelIO)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .bigbrain.AIModelIO.IOType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::bigbrain::AIModelIO_IOType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelIO.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bigbrain.AIModelIO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bigbrain.AIModelIO)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AIModelIO::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bigbrain.AIModelIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bigbrain.AIModelIO.IOType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelIO.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bigbrain.AIModelIO)
}

::PROTOBUF_NAMESPACE_ID::uint8* AIModelIO::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bigbrain.AIModelIO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bigbrain.AIModelIO.IOType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelIO.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bigbrain.AIModelIO)
  return target;
}

size_t AIModelIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bigbrain.AIModelIO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .bigbrain.AIModelIO.IOType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIModelIO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bigbrain.AIModelIO)
  GOOGLE_DCHECK_NE(&from, this);
  const AIModelIO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIModelIO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bigbrain.AIModelIO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bigbrain.AIModelIO)
    MergeFrom(*source);
  }
}

void AIModelIO::MergeFrom(const AIModelIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bigbrain.AIModelIO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AIModelIO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bigbrain.AIModelIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIModelIO::CopyFrom(const AIModelIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bigbrain.AIModelIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIModelIO::IsInitialized() const {
  return true;
}

void AIModelIO::Swap(AIModelIO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIModelIO::InternalSwap(AIModelIO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIModelIO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AIModelFramework::InitAsDefaultInstance() {
}
class AIModelFramework::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIModelFramework::kFrameworkFieldNumber;
const int AIModelFramework::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIModelFramework::AIModelFramework()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bigbrain.AIModelFramework)
}
AIModelFramework::AIModelFramework(const AIModelFramework& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  framework_ = from.framework_;
  // @@protoc_insertion_point(copy_constructor:bigbrain.AIModelFramework)
}

void AIModelFramework::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AIModelFramework_bigbrain_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framework_ = 0;
}

AIModelFramework::~AIModelFramework() {
  // @@protoc_insertion_point(destructor:bigbrain.AIModelFramework)
  SharedDtor();
}

void AIModelFramework::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AIModelFramework::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIModelFramework& AIModelFramework::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIModelFramework_bigbrain_2eproto.base);
  return *internal_default_instance();
}


void AIModelFramework::Clear() {
// @@protoc_insertion_point(message_clear_start:bigbrain.AIModelFramework)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  framework_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AIModelFramework::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bigbrain.AIModelFramework.ModelFramework framework = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_framework(static_cast<::bigbrain::AIModelFramework_ModelFramework>(val));
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_version(), ptr, ctx, "bigbrain.AIModelFramework.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AIModelFramework::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:bigbrain.AIModelFramework)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .bigbrain.AIModelFramework.ModelFramework framework = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_framework(static_cast< ::bigbrain::AIModelFramework_ModelFramework >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelFramework.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bigbrain.AIModelFramework)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bigbrain.AIModelFramework)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AIModelFramework::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bigbrain.AIModelFramework)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bigbrain.AIModelFramework.ModelFramework framework = 1;
  if (this->framework() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->framework(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelFramework.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bigbrain.AIModelFramework)
}

::PROTOBUF_NAMESPACE_ID::uint8* AIModelFramework::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bigbrain.AIModelFramework)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bigbrain.AIModelFramework.ModelFramework framework = 1;
  if (this->framework() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->framework(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelFramework.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bigbrain.AIModelFramework)
  return target;
}

size_t AIModelFramework::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bigbrain.AIModelFramework)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .bigbrain.AIModelFramework.ModelFramework framework = 1;
  if (this->framework() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->framework());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIModelFramework::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bigbrain.AIModelFramework)
  GOOGLE_DCHECK_NE(&from, this);
  const AIModelFramework* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIModelFramework>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bigbrain.AIModelFramework)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bigbrain.AIModelFramework)
    MergeFrom(*source);
  }
}

void AIModelFramework::MergeFrom(const AIModelFramework& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bigbrain.AIModelFramework)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.framework() != 0) {
    set_framework(from.framework());
  }
}

void AIModelFramework::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bigbrain.AIModelFramework)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIModelFramework::CopyFrom(const AIModelFramework& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bigbrain.AIModelFramework)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIModelFramework::IsInitialized() const {
  return true;
}

void AIModelFramework::Swap(AIModelFramework* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIModelFramework::InternalSwap(AIModelFramework* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(framework_, other->framework_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIModelFramework::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AICapability::InitAsDefaultInstance() {
  ::bigbrain::_AICapability_default_instance_._instance.get_mutable()->information_ = const_cast< ::bigbrain::AIModelInformation*>(
      ::bigbrain::AIModelInformation::internal_default_instance());
  ::bigbrain::_AICapability_default_instance_._instance.get_mutable()->container_ = const_cast< ::bigbrain::AIModelContainer*>(
      ::bigbrain::AIModelContainer::internal_default_instance());
}
class AICapability::HasBitSetters {
 public:
  static const ::bigbrain::AIModelInformation& information(const AICapability* msg);
  static const ::bigbrain::AIModelContainer& container(const AICapability* msg);
};

const ::bigbrain::AIModelInformation&
AICapability::HasBitSetters::information(const AICapability* msg) {
  return *msg->information_;
}
const ::bigbrain::AIModelContainer&
AICapability::HasBitSetters::container(const AICapability* msg) {
  return *msg->container_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AICapability::kInformationFieldNumber;
const int AICapability::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AICapability::AICapability()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bigbrain.AICapability)
}
AICapability::AICapability(const AICapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_information()) {
    information_ = new ::bigbrain::AIModelInformation(*from.information_);
  } else {
    information_ = nullptr;
  }
  if (from.has_container()) {
    container_ = new ::bigbrain::AIModelContainer(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bigbrain.AICapability)
}

void AICapability::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AICapability_bigbrain_2eproto.base);
  ::memset(&information_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&container_) -
      reinterpret_cast<char*>(&information_)) + sizeof(container_));
}

AICapability::~AICapability() {
  // @@protoc_insertion_point(destructor:bigbrain.AICapability)
  SharedDtor();
}

void AICapability::SharedDtor() {
  if (this != internal_default_instance()) delete information_;
  if (this != internal_default_instance()) delete container_;
}

void AICapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AICapability& AICapability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AICapability_bigbrain_2eproto.base);
  return *internal_default_instance();
}


void AICapability::Clear() {
// @@protoc_insertion_point(message_clear_start:bigbrain.AICapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && information_ != nullptr) {
    delete information_;
  }
  information_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AICapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bigbrain.AIModelInformation information = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_information(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bigbrain.AIModelContainer container = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_container(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AICapability::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:bigbrain.AICapability)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .bigbrain.AIModelInformation information = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_information()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bigbrain.AIModelContainer container = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bigbrain.AICapability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bigbrain.AICapability)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AICapability::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bigbrain.AICapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bigbrain.AIModelInformation information = 1;
  if (this->has_information()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::information(this), output);
  }

  // .bigbrain.AIModelContainer container = 2;
  if (this->has_container()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::container(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bigbrain.AICapability)
}

::PROTOBUF_NAMESPACE_ID::uint8* AICapability::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bigbrain.AICapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bigbrain.AIModelInformation information = 1;
  if (this->has_information()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::information(this), target);
  }

  // .bigbrain.AIModelContainer container = 2;
  if (this->has_container()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::container(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bigbrain.AICapability)
  return target;
}

size_t AICapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bigbrain.AICapability)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bigbrain.AIModelInformation information = 1;
  if (this->has_information()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *information_);
  }

  // .bigbrain.AIModelContainer container = 2;
  if (this->has_container()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AICapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bigbrain.AICapability)
  GOOGLE_DCHECK_NE(&from, this);
  const AICapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AICapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bigbrain.AICapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bigbrain.AICapability)
    MergeFrom(*source);
  }
}

void AICapability::MergeFrom(const AICapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bigbrain.AICapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_information()) {
    mutable_information()->::bigbrain::AIModelInformation::MergeFrom(from.information());
  }
  if (from.has_container()) {
    mutable_container()->::bigbrain::AIModelContainer::MergeFrom(from.container());
  }
}

void AICapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bigbrain.AICapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AICapability::CopyFrom(const AICapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bigbrain.AICapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AICapability::IsInitialized() const {
  return true;
}

void AICapability::Swap(AICapability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AICapability::InternalSwap(AICapability* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(information_, other->information_);
  swap(container_, other->container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AICapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AIModelInformation::InitAsDefaultInstance() {
  ::bigbrain::_AIModelInformation_default_instance_._instance.get_mutable()->framework_ = const_cast< ::bigbrain::AIModelFramework*>(
      ::bigbrain::AIModelFramework::internal_default_instance());
}
class AIModelInformation::HasBitSetters {
 public:
  static const ::bigbrain::AIModelFramework& framework(const AIModelInformation* msg);
};

const ::bigbrain::AIModelFramework&
AIModelInformation::HasBitSetters::framework(const AIModelInformation* msg) {
  return *msg->framework_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIModelInformation::kNameFieldNumber;
const int AIModelInformation::kDescriptionFieldNumber;
const int AIModelInformation::kPathFieldNumber;
const int AIModelInformation::kFrameworkFieldNumber;
const int AIModelInformation::kInputsFieldNumber;
const int AIModelInformation::kOutputsFieldNumber;
const int AIModelInformation::kUpdateableFieldNumber;
const int AIModelInformation::kUpdateInputsFieldNumber;
const int AIModelInformation::kUpdateOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIModelInformation::AIModelInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bigbrain.AIModelInformation)
}
AIModelInformation::AIModelInformation(const AIModelInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      update_inputs_(from.update_inputs_),
      update_outputs_(from.update_outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_framework()) {
    framework_ = new ::bigbrain::AIModelFramework(*from.framework_);
  } else {
    framework_ = nullptr;
  }
  updateable_ = from.updateable_;
  // @@protoc_insertion_point(copy_constructor:bigbrain.AIModelInformation)
}

void AIModelInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AIModelInformation_bigbrain_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&framework_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateable_) -
      reinterpret_cast<char*>(&framework_)) + sizeof(updateable_));
}

AIModelInformation::~AIModelInformation() {
  // @@protoc_insertion_point(destructor:bigbrain.AIModelInformation)
  SharedDtor();
}

void AIModelInformation::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete framework_;
}

void AIModelInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIModelInformation& AIModelInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIModelInformation_bigbrain_2eproto.base);
  return *internal_default_instance();
}


void AIModelInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:bigbrain.AIModelInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  update_inputs_.Clear();
  update_outputs_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && framework_ != nullptr) {
    delete framework_;
  }
  framework_ = nullptr;
  updateable_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AIModelInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "bigbrain.AIModelInformation.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_description(), ptr, ctx, "bigbrain.AIModelInformation.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_path(), ptr, ctx, "bigbrain.AIModelInformation.path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bigbrain.AIModelFramework framework = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_framework(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bigbrain.AIModelIO inputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .bigbrain.AIModelIO outputs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // bool updateable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          updateable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bigbrain.AIModelIO update_inputs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_update_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .bigbrain.AIModelIO update_outputs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_update_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AIModelInformation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:bigbrain.AIModelInformation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelInformation.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelInformation.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelInformation.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bigbrain.AIModelFramework framework = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_framework()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bigbrain.AIModelIO inputs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bigbrain.AIModelIO outputs = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool updateable = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &updateable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bigbrain.AIModelIO update_inputs = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_update_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bigbrain.AIModelIO update_outputs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_update_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bigbrain.AIModelInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bigbrain.AIModelInformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AIModelInformation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bigbrain.AIModelInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelInformation.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelInformation.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelInformation.path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // .bigbrain.AIModelFramework framework = 4;
  if (this->has_framework()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::framework(this), output);
  }

  // repeated .bigbrain.AIModelIO inputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated .bigbrain.AIModelIO outputs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->outputs(static_cast<int>(i)),
      output);
  }

  // bool updateable = 7;
  if (this->updateable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->updateable(), output);
  }

  // repeated .bigbrain.AIModelIO update_inputs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->update_inputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->update_inputs(static_cast<int>(i)),
      output);
  }

  // repeated .bigbrain.AIModelIO update_outputs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->update_outputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->update_outputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bigbrain.AIModelInformation)
}

::PROTOBUF_NAMESPACE_ID::uint8* AIModelInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bigbrain.AIModelInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelInformation.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelInformation.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelInformation.path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // .bigbrain.AIModelFramework framework = 4;
  if (this->has_framework()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::framework(this), target);
  }

  // repeated .bigbrain.AIModelIO inputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->inputs(static_cast<int>(i)), target);
  }

  // repeated .bigbrain.AIModelIO outputs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->outputs(static_cast<int>(i)), target);
  }

  // bool updateable = 7;
  if (this->updateable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->updateable(), target);
  }

  // repeated .bigbrain.AIModelIO update_inputs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->update_inputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->update_inputs(static_cast<int>(i)), target);
  }

  // repeated .bigbrain.AIModelIO update_outputs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->update_outputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->update_outputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bigbrain.AIModelInformation)
  return target;
}

size_t AIModelInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bigbrain.AIModelInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bigbrain.AIModelIO inputs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .bigbrain.AIModelIO outputs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // repeated .bigbrain.AIModelIO update_inputs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->update_inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->update_inputs(static_cast<int>(i)));
    }
  }

  // repeated .bigbrain.AIModelIO update_outputs = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->update_outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->update_outputs(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .bigbrain.AIModelFramework framework = 4;
  if (this->has_framework()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *framework_);
  }

  // bool updateable = 7;
  if (this->updateable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIModelInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bigbrain.AIModelInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const AIModelInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIModelInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bigbrain.AIModelInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bigbrain.AIModelInformation)
    MergeFrom(*source);
  }
}

void AIModelInformation::MergeFrom(const AIModelInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bigbrain.AIModelInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  update_inputs_.MergeFrom(from.update_inputs_);
  update_outputs_.MergeFrom(from.update_outputs_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_framework()) {
    mutable_framework()->::bigbrain::AIModelFramework::MergeFrom(from.framework());
  }
  if (from.updateable() != 0) {
    set_updateable(from.updateable());
  }
}

void AIModelInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bigbrain.AIModelInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIModelInformation::CopyFrom(const AIModelInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bigbrain.AIModelInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIModelInformation::IsInitialized() const {
  return true;
}

void AIModelInformation::Swap(AIModelInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIModelInformation::InternalSwap(AIModelInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  CastToBase(&update_inputs_)->InternalSwap(CastToBase(&other->update_inputs_));
  CastToBase(&update_outputs_)->InternalSwap(CastToBase(&other->update_outputs_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(framework_, other->framework_);
  swap(updateable_, other->updateable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIModelInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AIModelContainer::InitAsDefaultInstance() {
}
class AIModelContainer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIModelContainer::kHashFieldNumber;
const int AIModelContainer::kHashModelFieldNumber;
const int AIModelContainer::kHashStateFieldNumber;
const int AIModelContainer::kTimestampFieldNumber;
const int AIModelContainer::kModelFieldNumber;
const int AIModelContainer::kStateFieldNumber;
const int AIModelContainer::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIModelContainer::AIModelContainer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bigbrain.AIModelContainer)
}
AIModelContainer::AIModelContainer(const AIModelContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  hash_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hash_model().size() > 0) {
    hash_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_model_);
  }
  hash_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hash_state().size() > 0) {
    hash_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_state_);
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.other().size() > 0) {
    other_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.other_);
  }
  // @@protoc_insertion_point(copy_constructor:bigbrain.AIModelContainer)
}

void AIModelContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AIModelContainer_bigbrain_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AIModelContainer::~AIModelContainer() {
  // @@protoc_insertion_point(destructor:bigbrain.AIModelContainer)
  SharedDtor();
}

void AIModelContainer::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AIModelContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIModelContainer& AIModelContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIModelContainer_bigbrain_2eproto.base);
  return *internal_default_instance();
}


void AIModelContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:bigbrain.AIModelContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AIModelContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hash(), ptr, ctx, "bigbrain.AIModelContainer.hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hash_model(), ptr, ctx, "bigbrain.AIModelContainer.hash_model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hash_state(), ptr, ctx, "bigbrain.AIModelContainer.hash_state");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_timestamp(), ptr, ctx, "bigbrain.AIModelContainer.timestamp");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_model(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_state(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes other = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_other(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AIModelContainer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:bigbrain.AIModelContainer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelContainer.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash_model = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hash_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hash_model().data(), static_cast<int>(this->hash_model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelContainer.hash_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hash_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hash_state()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hash_state().data(), static_cast<int>(this->hash_state().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelContainer.hash_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), static_cast<int>(this->timestamp().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIModelContainer.timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes model = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes state = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes other = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bigbrain.AIModelContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bigbrain.AIModelContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AIModelContainer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bigbrain.AIModelContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelContainer.hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // string hash_model = 2;
  if (this->hash_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hash_model().data(), static_cast<int>(this->hash_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelContainer.hash_model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash_model(), output);
  }

  // string hash_state = 3;
  if (this->hash_state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hash_state().data(), static_cast<int>(this->hash_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelContainer.hash_state");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hash_state(), output);
  }

  // string timestamp = 4;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelContainer.timestamp");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timestamp(), output);
  }

  // bytes model = 5;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->model(), output);
  }

  // bytes state = 6;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->state(), output);
  }

  // bytes other = 7;
  if (this->other().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->other(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bigbrain.AIModelContainer)
}

::PROTOBUF_NAMESPACE_ID::uint8* AIModelContainer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bigbrain.AIModelContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelContainer.hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // string hash_model = 2;
  if (this->hash_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hash_model().data(), static_cast<int>(this->hash_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelContainer.hash_model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->hash_model(), target);
  }

  // string hash_state = 3;
  if (this->hash_state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hash_state().data(), static_cast<int>(this->hash_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelContainer.hash_state");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->hash_state(), target);
  }

  // string timestamp = 4;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), static_cast<int>(this->timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIModelContainer.timestamp");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->timestamp(), target);
  }

  // bytes model = 5;
  if (this->model().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->model(), target);
  }

  // bytes state = 6;
  if (this->state().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->state(), target);
  }

  // bytes other = 7;
  if (this->other().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->other(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bigbrain.AIModelContainer)
  return target;
}

size_t AIModelContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bigbrain.AIModelContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // string hash_model = 2;
  if (this->hash_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hash_model());
  }

  // string hash_state = 3;
  if (this->hash_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hash_state());
  }

  // string timestamp = 4;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // bytes model = 5;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->model());
  }

  // bytes state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->state());
  }

  // bytes other = 7;
  if (this->other().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->other());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIModelContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bigbrain.AIModelContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const AIModelContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIModelContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bigbrain.AIModelContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bigbrain.AIModelContainer)
    MergeFrom(*source);
  }
}

void AIModelContainer::MergeFrom(const AIModelContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bigbrain.AIModelContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.hash_model().size() > 0) {

    hash_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_model_);
  }
  if (from.hash_state().size() > 0) {

    hash_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_state_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.other().size() > 0) {

    other_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.other_);
  }
}

void AIModelContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bigbrain.AIModelContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIModelContainer::CopyFrom(const AIModelContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bigbrain.AIModelContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIModelContainer::IsInitialized() const {
  return true;
}

void AIModelContainer::Swap(AIModelContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIModelContainer::InternalSwap(AIModelContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_model_.Swap(&other->hash_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_state_.Swap(&other->hash_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  other_.Swap(&other->other_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AIModelContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AICapabilityRequest::InitAsDefaultInstance() {
}
class AICapabilityRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AICapabilityRequest::AICapabilityRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bigbrain.AICapabilityRequest)
}
AICapabilityRequest::AICapabilityRequest(const AICapabilityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bigbrain.AICapabilityRequest)
}

void AICapabilityRequest::SharedCtor() {
}

AICapabilityRequest::~AICapabilityRequest() {
  // @@protoc_insertion_point(destructor:bigbrain.AICapabilityRequest)
  SharedDtor();
}

void AICapabilityRequest::SharedDtor() {
}

void AICapabilityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AICapabilityRequest& AICapabilityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AICapabilityRequest_bigbrain_2eproto.base);
  return *internal_default_instance();
}


void AICapabilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bigbrain.AICapabilityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AICapabilityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AICapabilityRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:bigbrain.AICapabilityRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:bigbrain.AICapabilityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bigbrain.AICapabilityRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AICapabilityRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bigbrain.AICapabilityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bigbrain.AICapabilityRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AICapabilityRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bigbrain.AICapabilityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bigbrain.AICapabilityRequest)
  return target;
}

size_t AICapabilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bigbrain.AICapabilityRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AICapabilityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bigbrain.AICapabilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AICapabilityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AICapabilityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bigbrain.AICapabilityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bigbrain.AICapabilityRequest)
    MergeFrom(*source);
  }
}

void AICapabilityRequest::MergeFrom(const AICapabilityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bigbrain.AICapabilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AICapabilityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bigbrain.AICapabilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AICapabilityRequest::CopyFrom(const AICapabilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bigbrain.AICapabilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AICapabilityRequest::IsInitialized() const {
  return true;
}

void AICapabilityRequest::Swap(AICapabilityRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AICapabilityRequest::InternalSwap(AICapabilityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AICapabilityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AIModelsInformation::InitAsDefaultInstance() {
}
class AIModelsInformation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIModelsInformation::kModelInformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIModelsInformation::AIModelsInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bigbrain.AIModelsInformation)
}
AIModelsInformation::AIModelsInformation(const AIModelsInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      model_information_(from.model_information_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bigbrain.AIModelsInformation)
}

void AIModelsInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AIModelsInformation_bigbrain_2eproto.base);
}

AIModelsInformation::~AIModelsInformation() {
  // @@protoc_insertion_point(destructor:bigbrain.AIModelsInformation)
  SharedDtor();
}

void AIModelsInformation::SharedDtor() {
}

void AIModelsInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIModelsInformation& AIModelsInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIModelsInformation_bigbrain_2eproto.base);
  return *internal_default_instance();
}


void AIModelsInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:bigbrain.AIModelsInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_information_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AIModelsInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bigbrain.AIModelInformation model_information = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_model_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AIModelsInformation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:bigbrain.AIModelsInformation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bigbrain.AIModelInformation model_information = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_model_information()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bigbrain.AIModelsInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bigbrain.AIModelsInformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AIModelsInformation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bigbrain.AIModelsInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bigbrain.AIModelInformation model_information = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_information_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->model_information(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bigbrain.AIModelsInformation)
}

::PROTOBUF_NAMESPACE_ID::uint8* AIModelsInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bigbrain.AIModelsInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bigbrain.AIModelInformation model_information = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_information_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->model_information(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bigbrain.AIModelsInformation)
  return target;
}

size_t AIModelsInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bigbrain.AIModelsInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bigbrain.AIModelInformation model_information = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->model_information_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->model_information(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIModelsInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bigbrain.AIModelsInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const AIModelsInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIModelsInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bigbrain.AIModelsInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bigbrain.AIModelsInformation)
    MergeFrom(*source);
  }
}

void AIModelsInformation::MergeFrom(const AIModelsInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bigbrain.AIModelsInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_information_.MergeFrom(from.model_information_);
}

void AIModelsInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bigbrain.AIModelsInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIModelsInformation::CopyFrom(const AIModelsInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bigbrain.AIModelsInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIModelsInformation::IsInitialized() const {
  return true;
}

void AIModelsInformation::Swap(AIModelsInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIModelsInformation::InternalSwap(AIModelsInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&model_information_)->InternalSwap(CastToBase(&other->model_information_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AIModelsInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AIResponse::InitAsDefaultInstance() {
  ::bigbrain::_AIResponse_default_instance_.model_ = const_cast< ::bigbrain::AICapability*>(
      ::bigbrain::AICapability::internal_default_instance());
  ::bigbrain::_AIResponse_default_instance_.models_information_ = const_cast< ::bigbrain::AIModelsInformation*>(
      ::bigbrain::AIModelsInformation::internal_default_instance());
}
class AIResponse::HasBitSetters {
 public:
  static const ::bigbrain::AICapability& model(const AIResponse* msg);
  static const ::bigbrain::AIModelsInformation& models_information(const AIResponse* msg);
};

const ::bigbrain::AICapability&
AIResponse::HasBitSetters::model(const AIResponse* msg) {
  return *msg->result_.model_;
}
const ::bigbrain::AIModelsInformation&
AIResponse::HasBitSetters::models_information(const AIResponse* msg) {
  return *msg->result_.models_information_;
}
void AIResponse::set_allocated_model(::bigbrain::AICapability* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    set_has_model();
    result_.model_ = model;
  }
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIResponse.model)
}
void AIResponse::set_allocated_models_information(::bigbrain::AIModelsInformation* models_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (models_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      models_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, models_information, submessage_arena);
    }
    set_has_models_information();
    result_.models_information_ = models_information;
  }
  // @@protoc_insertion_point(field_set_allocated:bigbrain.AIResponse.models_information)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIResponse::kSuccessFieldNumber;
const int AIResponse::kErrorFieldNumber;
const int AIResponse::kModelFieldNumber;
const int AIResponse::kModelsInformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIResponse::AIResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bigbrain.AIResponse)
}
AIResponse::AIResponse(const AIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  success_ = from.success_;
  clear_has_result();
  switch (from.result_case()) {
    case kModel: {
      mutable_model()->::bigbrain::AICapability::MergeFrom(from.model());
      break;
    }
    case kModelsInformation: {
      mutable_models_information()->::bigbrain::AIModelsInformation::MergeFrom(from.models_information());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bigbrain.AIResponse)
}

void AIResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AIResponse_bigbrain_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  clear_has_result();
}

AIResponse::~AIResponse() {
  // @@protoc_insertion_point(destructor:bigbrain.AIResponse)
  SharedDtor();
}

void AIResponse::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_result()) {
    clear_result();
  }
}

void AIResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIResponse& AIResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIResponse_bigbrain_2eproto.base);
  return *internal_default_instance();
}


void AIResponse::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:bigbrain.AIResponse)
  switch (result_case()) {
    case kModel: {
      delete result_.model_;
      break;
    }
    case kModelsInformation: {
      delete result_.models_information_;
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void AIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bigbrain.AIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  clear_result();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AIResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error(), ptr, ctx, "bigbrain.AIResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bigbrain.AICapability model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bigbrain.AIModelsInformation models_information = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_models_information(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AIResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:bigbrain.AIResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "bigbrain.AIResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bigbrain.AICapability model = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bigbrain.AIModelsInformation models_information = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_models_information()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bigbrain.AIResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bigbrain.AIResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AIResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bigbrain.AIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIResponse.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // .bigbrain.AICapability model = 3;
  if (has_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::model(this), output);
  }

  // .bigbrain.AIModelsInformation models_information = 4;
  if (has_models_information()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::models_information(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bigbrain.AIResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* AIResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bigbrain.AIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bigbrain.AIResponse.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // .bigbrain.AICapability model = 3;
  if (has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::model(this), target);
  }

  // .bigbrain.AIModelsInformation models_information = 4;
  if (has_models_information()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::models_information(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bigbrain.AIResponse)
  return target;
}

size_t AIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bigbrain.AIResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  switch (result_case()) {
    // .bigbrain.AICapability model = 3;
    case kModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.model_);
      break;
    }
    // .bigbrain.AIModelsInformation models_information = 4;
    case kModelsInformation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.models_information_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bigbrain.AIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AIResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bigbrain.AIResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bigbrain.AIResponse)
    MergeFrom(*source);
  }
}

void AIResponse::MergeFrom(const AIResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bigbrain.AIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  switch (from.result_case()) {
    case kModel: {
      mutable_model()->::bigbrain::AICapability::MergeFrom(from.model());
      break;
    }
    case kModelsInformation: {
      mutable_models_information()->::bigbrain::AIModelsInformation::MergeFrom(from.models_information());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void AIResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bigbrain.AIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIResponse::CopyFrom(const AIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bigbrain.AIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIResponse::IsInitialized() const {
  return true;
}

void AIResponse::Swap(AIResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIResponse::InternalSwap(AIResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bigbrain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bigbrain::AIModelIO* Arena::CreateMaybeMessage< ::bigbrain::AIModelIO >(Arena* arena) {
  return Arena::CreateInternal< ::bigbrain::AIModelIO >(arena);
}
template<> PROTOBUF_NOINLINE ::bigbrain::AIModelFramework* Arena::CreateMaybeMessage< ::bigbrain::AIModelFramework >(Arena* arena) {
  return Arena::CreateInternal< ::bigbrain::AIModelFramework >(arena);
}
template<> PROTOBUF_NOINLINE ::bigbrain::AICapability* Arena::CreateMaybeMessage< ::bigbrain::AICapability >(Arena* arena) {
  return Arena::CreateInternal< ::bigbrain::AICapability >(arena);
}
template<> PROTOBUF_NOINLINE ::bigbrain::AIModelInformation* Arena::CreateMaybeMessage< ::bigbrain::AIModelInformation >(Arena* arena) {
  return Arena::CreateInternal< ::bigbrain::AIModelInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::bigbrain::AIModelContainer* Arena::CreateMaybeMessage< ::bigbrain::AIModelContainer >(Arena* arena) {
  return Arena::CreateInternal< ::bigbrain::AIModelContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::bigbrain::AICapabilityRequest* Arena::CreateMaybeMessage< ::bigbrain::AICapabilityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bigbrain::AICapabilityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bigbrain::AIModelsInformation* Arena::CreateMaybeMessage< ::bigbrain::AIModelsInformation >(Arena* arena) {
  return Arena::CreateInternal< ::bigbrain::AIModelsInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::bigbrain::AIResponse* Arena::CreateMaybeMessage< ::bigbrain::AIResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bigbrain::AIResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
